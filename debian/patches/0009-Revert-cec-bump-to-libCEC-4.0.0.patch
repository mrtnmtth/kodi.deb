From bee521c0e7f9553fde3e43f557b7b25ef2f65f84 Mon Sep 17 00:00:00 2001
From: Balint Reczey <balint@balintreczey.hu>
Date: Sat, 17 Dec 2016 23:01:43 +0100
Subject: [PATCH 9/9] Revert "[cec] bump to libCEC 4.0.0"

This reverts commit cc3ae0339faf2b669bee20cb360c526410910f42.

Conflicts:
	addons/resource.language.en_gb/resources/strings.po
	project/BuildDependencies/scripts/0_package.list
---
 configure.ac                                      |   4 +-
 project/BuildDependencies/scripts/0_package.list  |   2 +-
 project/cmake/modules/FindCEC.cmake               |   2 +-
 system/peripherals.xml                            |   1 +
 tools/depends/target/Makefile                     |   5 +-
 tools/depends/target/libcec/Makefile              |   4 +-
 tools/depends/target/p8-platform/Makefile         |  34 ----
 xbmc/peripherals/devices/PeripheralCecAdapter.cpp | 192 ++++++++++++----------
 xbmc/peripherals/devices/PeripheralCecAdapter.h   |  17 +-
 9 files changed, 123 insertions(+), 138 deletions(-)
 delete mode 100644 tools/depends/target/p8-platform/Makefile

--- a/configure.ac
+++ b/configure.ac
@@ -1453,9 +1453,9 @@
   # libcec is dyloaded, so we need to check for its headers and link any depends.
   if test "x$use_libcec" != "xno"; then
     if test "x$use_libcec" != "xauto"; then
-      PKG_CHECK_MODULES([CEC],[libcec >= 4.0.0],,[use_libcec="no";AC_MSG_ERROR($libcec_disabled)])
+      PKG_CHECK_MODULES([CEC],[libcec >= 3.0.0],,[use_libcec="no";AC_MSG_ERROR($libcec_disabled)])
     else
-      PKG_CHECK_MODULES([CEC],[libcec >= 4.0.0],,[use_libcec="no";AC_MSG_RESULT($libcec_disabled)])
+      PKG_CHECK_MODULES([CEC],[libcec >= 3.0.0],,[use_libcec="no";AC_MSG_RESULT($libcec_disabled)])
     fi
 
     if test "x$use_libcec" != "xno"; then
--- a/project/cmake/modules/FindCEC.cmake
+++ b/project/cmake/modules/FindCEC.cmake
@@ -15,7 +15,7 @@
 #   CEC::CEC   - The libCEC library
 
 if(PKG_CONFIG_FOUND)
-  pkg_check_modules(PC_CEC libcec>=4.0.0 QUIET)
+  pkg_check_modules(PC_CEC libcec>=3.0.0 QUIET)
 endif()
 
 find_path(CEC_INCLUDE_DIR libcec/cec.h libCEC/CEC.h
--- a/system/peripherals.xml
+++ b/system/peripherals.xml
@@ -24,6 +24,7 @@
     <setting key="connected_device" type="enum" label="36019" value="36037" lvalues="36037|36038" order="12" />
     <setting key="cec_hdmi_port" type="int" value="1" min="1" max="15" label="36015" order="13" />
     <setting key="physical_address" type="string" label="36021" value="0" order="14" />
+    <setting key="port" type="string" value="" label="36022" order="15" />
 
     <setting key="tv_vendor" type="int" value="0" configurable="0" />
     <setting key="device_name" type="string" value="Kodi" configurable="0" />
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
@@ -43,7 +43,7 @@
 using namespace ANNOUNCEMENT;
 using namespace CEC;
 
-#define CEC_LIB_SUPPORTED_VERSION LIBCEC_VERSION_TO_UINT(4, 0, 0)
+#define CEC_LIB_SUPPORTED_VERSION LIBCEC_VERSION_TO_UINT(3, 0, 0)
 
 /* time in seconds to ignore standby commands from devices after the screensaver has been activated */
 #define SCREENSAVER_TIMEOUT       20
@@ -119,30 +119,25 @@
     m_dll->CECDestroy(m_cecAdapter);
   m_cecAdapter               = NULL;
   delete m_dll;
-  m_dll                        = NULL;
-  m_bStarted                   = false;
-  m_bHasButton                 = false;
-  m_bIsReady                   = false;
-  m_bHasConnectedAudioSystem   = false;
-  m_strMenuLanguage            = "???";
-  m_lastKeypress               = 0;
-  m_lastChange                 = VOLUME_CHANGE_NONE;
-  m_iExitCode                  = EXITCODE_QUIT;
-  m_bIsMuted                   = false; //! @todo fetch the correct initial value when system audiostatus is implemented in libCEC
-  m_bGoingToStandby            = false;
-  m_bIsRunning                 = false;
-  m_bDeviceRemoved             = false;
-  m_bActiveSourcePending       = false;
-  m_bStandbyPending            = false;
+  m_dll                      = NULL;
+  m_bStarted                 = false;
+  m_bHasButton               = false;
+  m_bIsReady                 = false;
+  m_bHasConnectedAudioSystem = false;
+  m_strMenuLanguage          = "???";
+  m_lastKeypress             = 0;
+  m_lastChange               = VOLUME_CHANGE_NONE;
+  m_iExitCode                = EXITCODE_QUIT;
+  m_bIsMuted                 = false; //! @todo fetch the correct initial value when system audiostatus is implemented in libCEC
+  m_bGoingToStandby          = false;
+  m_bIsRunning               = false;
+  m_bDeviceRemoved           = false;
+  m_bActiveSourcePending     = false;
+  m_bStandbyPending          = false;
   m_bActiveSourceBeforeStandby = false;
-  m_bOnPlayReceived            = false;
-  m_bPlaybackPaused            = false;
-  m_queryThread                = NULL;
-  m_bPowerOnScreensaver        = false;
-  m_bUseTVMenuLanguage         = false;
-  m_bSendInactiveSource        = false;
-  m_bPowerOffScreensaver       = false;
-  m_bShutdownOnStandby         = false;
+  m_bOnPlayReceived          = false;
+  m_bPlaybackPaused          = false;
+  m_queryThread              = NULL;
 
   m_currentButton.iButton    = 0;
   m_currentButton.iDuration  = 0;
@@ -171,8 +166,8 @@
       if (bIgnoreDeactivate)
         CLog::Log(LOGDEBUG, "%s - ignoring OnScreensaverDeactivated for power action", __FUNCTION__);
     }
-    if (m_bPowerOnScreensaver && !bIgnoreDeactivate &&
-        m_configuration.bActivateSource)
+    if (m_configuration.bPowerOnScreensaver == 1 && !bIgnoreDeactivate &&
+        m_configuration.bActivateSource == 1)
     {
       ActivateSource();
     }
@@ -180,7 +175,7 @@
   else if (flag == GUI && !strcmp(sender, "xbmc") && !strcmp(message, "OnScreensaverActivated") && m_bIsReady)
   {
     // Don't put devices to standby if application is currently playing
-    if (!g_application.m_pPlayer->IsPlaying() && m_bPowerOffScreensaver)
+    if (!g_application.m_pPlayer->IsPlaying() && m_configuration.bPowerOffScreensaver == 1)
     {
       // only power off when we're the active source
       if (m_cecAdapter->IsLibCECActiveSource())
@@ -246,14 +241,14 @@
 
     SetConfigurationFromSettings();
     m_callbacks.Clear();
-    m_callbacks.logMessage           = &CecLogMessage;
-    m_callbacks.keyPress             = &CecKeyPress;
-    m_callbacks.commandReceived      = &CecCommand;
-    m_callbacks.configurationChanged = &CecConfiguration;
-    m_callbacks.alert                = &CecAlert;
-    m_callbacks.sourceActivated      = &CecSourceActivated;
-    m_configuration.callbackParam    = this;
-    m_configuration.callbacks        = &m_callbacks;
+    m_callbacks.CBCecLogMessage           = &CecLogMessage;
+    m_callbacks.CBCecKeyPress             = &CecKeyPress;
+    m_callbacks.CBCecCommand              = &CecCommand;
+    m_callbacks.CBCecConfigurationChanged = &CecConfiguration;
+    m_callbacks.CBCecAlert                = &CecAlert;
+    m_callbacks.CBCecSourceActivated      = &CecSourceActivated;
+    m_configuration.callbackParam         = this;
+    m_configuration.callbacks             = &m_callbacks;
 
     m_dll = new DllLibCEC;
     if (m_dll->Load() && m_dll->IsLoaded())
@@ -419,7 +414,7 @@
         m_standbySent = CDateTime::GetCurrentDateTime();
         m_cecAdapter->StandbyDevices();
       }
-      else if (m_bSendInactiveSource)
+      else if (m_configuration.bSendInactiveSource == 1)
       {
         CLog::Log(LOGDEBUG, "%s - sending inactive source commands", __FUNCTION__);
         m_cecAdapter->SetInactiveView();
@@ -619,43 +614,43 @@
     CLog::Log(LOGWARNING, "%s - TV menu language set to unknown value '%s'", __FUNCTION__, strLanguage);
 }
 
-void CPeripheralCecAdapter::CecCommand(void *cbParam, const cec_command* command)
+int CPeripheralCecAdapter::CecCommand(void *cbParam, const cec_command command)
 {
-  CPeripheralCecAdapter *adapter = static_cast<CPeripheralCecAdapter *>(cbParam);
+  CPeripheralCecAdapter *adapter = (CPeripheralCecAdapter *)cbParam;
   if (!adapter)
-    return;
+    return 0;
 
   if (adapter->m_bIsReady)
   {
-    switch (command->opcode)
+    switch (command.opcode)
     {
     case CEC_OPCODE_STANDBY:
       /* a device was put in standby mode */
-      if (command->initiator == CECDEVICE_TV &&
-          (adapter->m_configuration.bPowerOffOnStandby == 1 || adapter->m_bShutdownOnStandby) &&
+      if (command.initiator == CECDEVICE_TV &&
+          (adapter->m_configuration.bPowerOffOnStandby == 1 || adapter->m_configuration.bShutdownOnStandby == 1) &&
           (!adapter->m_standbySent.IsValid() || CDateTime::GetCurrentDateTime() - adapter->m_standbySent > CDateTimeSpan(0, 0, 0, SCREENSAVER_TIMEOUT)))
       {
         adapter->m_bStarted = false;
         if (adapter->m_configuration.bPowerOffOnStandby == 1)
           g_application.ExecuteXBMCAction("Suspend");
-        else if (adapter->m_bShutdownOnStandby)
+        else if (adapter->m_configuration.bShutdownOnStandby == 1)
           g_application.ExecuteXBMCAction("Shutdown");
       }
       break;
     case CEC_OPCODE_SET_MENU_LANGUAGE:
-      if (adapter->m_bUseTVMenuLanguage == 1 && command->initiator == CECDEVICE_TV && command->parameters.size == 3)
+      if (adapter->m_configuration.bUseTVMenuLanguage == 1 && command.initiator == CECDEVICE_TV && command.parameters.size == 3)
       {
         char strNewLanguage[4];
         for (int iPtr = 0; iPtr < 3; iPtr++)
-          strNewLanguage[iPtr] = command->parameters[iPtr];
+          strNewLanguage[iPtr] = command.parameters[iPtr];
         strNewLanguage[3] = 0;
         adapter->SetMenuLanguage(strNewLanguage);
       }
       break;
     case CEC_OPCODE_DECK_CONTROL:
-      if (command->initiator == CECDEVICE_TV &&
-          command->parameters.size == 1 &&
-          command->parameters[0] == CEC_DECK_CONTROL_MODE_STOP)
+      if (command.initiator == CECDEVICE_TV &&
+          command.parameters.size == 1 &&
+          command.parameters[0] == CEC_DECK_CONTROL_MODE_STOP)
       {
         cec_keypress key;
         key.duration = 500;
@@ -664,17 +659,17 @@
       }
       break;
     case CEC_OPCODE_PLAY:
-      if (command->initiator == CECDEVICE_TV &&
-          command->parameters.size == 1)
+      if (command.initiator == CECDEVICE_TV &&
+          command.parameters.size == 1)
       {
-        if (command->parameters[0] == CEC_PLAY_MODE_PLAY_FORWARD)
+        if (command.parameters[0] == CEC_PLAY_MODE_PLAY_FORWARD)
         {
           cec_keypress key;
           key.duration = 500;
           key.keycode = CEC_USER_CONTROL_CODE_PLAY;
           adapter->PushCecKeypress(key);
         }
-        else if (command->parameters[0] == CEC_PLAY_MODE_PLAY_STILL)
+        else if (command.parameters[0] == CEC_PLAY_MODE_PLAY_STILL)
         {
           cec_keypress key;
           key.duration = 500;
@@ -687,23 +682,25 @@
       break;
     }
   }
+  return 1;
 }
 
-void CPeripheralCecAdapter::CecConfiguration(void *cbParam, const libcec_configuration* config)
+int CPeripheralCecAdapter::CecConfiguration(void *cbParam, const libcec_configuration config)
 {
-  CPeripheralCecAdapter *adapter = static_cast<CPeripheralCecAdapter *>(cbParam);
+  CPeripheralCecAdapter *adapter = (CPeripheralCecAdapter *)cbParam;
   if (!adapter)
-    return;
+    return 0;
 
   CSingleLock lock(adapter->m_critSection);
-  adapter->SetConfigurationFromLibCEC(*config);
+  adapter->SetConfigurationFromLibCEC(config);
+  return 1;
 }
 
-void CPeripheralCecAdapter::CecAlert(void *cbParam, const libcec_alert alert, const libcec_parameter data)
+int CPeripheralCecAdapter::CecAlert(void *cbParam, const libcec_alert alert, const libcec_parameter data)
 {
-  CPeripheralCecAdapter *adapter = static_cast<CPeripheralCecAdapter *>(cbParam);
+  CPeripheralCecAdapter *adapter = (CPeripheralCecAdapter *)cbParam;
   if (!adapter)
-    return;
+    return 0;
 
   bool bReopenConnection(false);
   int iAlertString(0);
@@ -746,13 +743,18 @@
     // calls this callback function synchronously and must not be destroyed meanwhile.
     adapter->ReopenConnection(true);
   }
+
+  return 1;
 }
 
-void CPeripheralCecAdapter::CecKeyPress(void *cbParam, const cec_keypress* key)
+int CPeripheralCecAdapter::CecKeyPress(void *cbParam, const cec_keypress key)
 {
-  CPeripheralCecAdapter *adapter = static_cast<CPeripheralCecAdapter *>(cbParam);
-  if (!!adapter)
-    adapter->PushCecKeypress(*key);
+  CPeripheralCecAdapter *adapter = (CPeripheralCecAdapter *)cbParam;
+  if (!adapter)
+    return 0;
+
+  adapter->PushCecKeypress(key);
+  return 1;
 }
 
 void CPeripheralCecAdapter::GetNextKey(void)
@@ -1152,7 +1154,7 @@
 
 void CPeripheralCecAdapter::CecSourceActivated(void *cbParam, const CEC::cec_logical_address address, const uint8_t activated)
 {
-  CPeripheralCecAdapter *adapter = static_cast<CPeripheralCecAdapter *>(cbParam);
+  CPeripheralCecAdapter *adapter = (CPeripheralCecAdapter *)cbParam;
   if (!adapter)
     return;
 
@@ -1194,14 +1196,14 @@
   }
 }
 
-void CPeripheralCecAdapter::CecLogMessage(void *cbParam, const cec_log_message* message)
+int CPeripheralCecAdapter::CecLogMessage(void *cbParam, const cec_log_message message)
 {
-  CPeripheralCecAdapter *adapter = static_cast<CPeripheralCecAdapter *>(cbParam);
+  CPeripheralCecAdapter *adapter = (CPeripheralCecAdapter *)cbParam;
   if (!adapter)
-    return;
+    return 0;
 
   int iLevel = -1;
-  switch (message->level)
+  switch (message.level)
   {
   case CEC_LOG_ERROR:
     iLevel = LOGERROR;
@@ -1221,7 +1223,9 @@
   }
 
   if (iLevel >= CEC_LOG_NOTICE || (iLevel >= 0 && CLog::IsLogLevelLogged(LOGDEBUG) && g_advancedSettings.CanLogComponent(LOGCEC)))
-    CLog::Log(iLevel, "%s - %s", __FUNCTION__, message->message);
+    CLog::Log(iLevel, "%s - %s", __FUNCTION__, message.message);
+
+  return 1;
 }
 
 void CPeripheralCecAdapter::SetConfigurationFromLibCEC(const CEC::libcec_configuration &config)
@@ -1266,18 +1270,35 @@
   bChanged |= WriteLogicalAddresses(config.powerOffDevices, "standby_devices", "standby_devices_advanced");
 
   // set the boolean settings
+  m_configuration.bUseTVMenuLanguage = config.bUseTVMenuLanguage;
+  bChanged |= SetSetting("use_tv_menu_language", m_configuration.bUseTVMenuLanguage == 1);
+
   m_configuration.bActivateSource = config.bActivateSource;
   bChanged |= SetSetting("activate_source", m_configuration.bActivateSource == 1);
 
+  m_configuration.bPowerOffScreensaver = config.bPowerOffScreensaver;
+  bChanged |= SetSetting("cec_standby_screensaver", m_configuration.bPowerOffScreensaver == 1);
+
+  m_configuration.bPowerOnScreensaver = config.bPowerOnScreensaver;
+  bChanged |= SetSetting("cec_wake_screensaver", m_configuration.bPowerOnScreensaver == 1);
+
   m_configuration.bPowerOffOnStandby = config.bPowerOffOnStandby;
 
+  m_configuration.bSendInactiveSource = config.bSendInactiveSource;
+  bChanged |= SetSetting("send_inactive_source", m_configuration.bSendInactiveSource == 1);
+
   m_configuration.iFirmwareVersion = config.iFirmwareVersion;
+  m_configuration.bShutdownOnStandby = config.bShutdownOnStandby;
 
   memcpy(m_configuration.strDeviceLanguage, config.strDeviceLanguage, 3);
   m_configuration.iFirmwareBuildDate = config.iFirmwareBuildDate;
 
   SetVersionInfo(m_configuration);
 
+  bChanged |= SetSetting("standby_pc_on_tv_standby",
+             m_configuration.bPowerOffOnStandby == 1 ? 13011 :
+             m_configuration.bShutdownOnStandby == 1 ? 13005 : 36028);
+
   if (bChanged)
     CLog::Log(LOGDEBUG, "SetConfigurationFromLibCEC - settings updated by libCEC");
 }
@@ -1285,7 +1306,7 @@
 void CPeripheralCecAdapter::SetConfigurationFromSettings(void)
 {
   // client version matches the version of libCEC that we originally used the API from
-  m_configuration.clientVersion = LIBCEC_VERSION_TO_UINT(4, 0, 0);
+  m_configuration.clientVersion = LIBCEC_VERSION_TO_UINT(3, 0, 0);
 
   // device name 'XBMC'
   snprintf(m_configuration.strDeviceName, 13, "%s", GetSettingString("device_name").c_str());
@@ -1352,16 +1373,16 @@
     ReadLogicalAddresses(GetSettingInt("standby_devices"), m_configuration.powerOffDevices);
 
   // read the boolean settings
-  m_bUseTVMenuLanguage                 = GetSettingBool("use_tv_menu_language") ? 1 : 0;
+  m_configuration.bUseTVMenuLanguage   = GetSettingBool("use_tv_menu_language") ? 1 : 0;
   m_configuration.bActivateSource      = GetSettingBool("activate_source") ? 1 : 0;
-  m_bPowerOffScreensaver               = GetSettingBool("cec_standby_screensaver") ? 1 : 0;
-  m_bPowerOnScreensaver                = GetSettingBool("cec_wake_screensaver") ? 1 : 0;
-  m_bSendInactiveSource                = GetSettingBool("send_inactive_source") ? 1 : 0;
+  m_configuration.bPowerOffScreensaver = GetSettingBool("cec_standby_screensaver") ? 1 : 0;
+  m_configuration.bPowerOnScreensaver  = GetSettingBool("cec_wake_screensaver") ? 1 : 0;
+  m_configuration.bSendInactiveSource  = GetSettingBool("send_inactive_source") ? 1 : 0;
 
   // read the mutually exclusive boolean settings
   int iStandbyAction(GetSettingInt("standby_pc_on_tv_standby"));
   m_configuration.bPowerOffOnStandby = iStandbyAction == 13011 ? 1 : 0;
-  m_bShutdownOnStandby = iStandbyAction == 13005;
+  m_configuration.bShutdownOnStandby = iStandbyAction == 13005 ? 1 : 0;
 
 #if defined(CEC_DOUBLE_TAP_TIMEOUT_MS_OLD)
   // double tap prevention timeout in ms. libCEC uses 50ms units for this in 2.2.0, so divide by 50
@@ -1508,11 +1529,14 @@
 void CPeripheralCecAdapterUpdateThread::UpdateMenuLanguage(void)
 {
   // request the menu language of the TV
-  if (m_adapter->m_bUseTVMenuLanguage == 1)
+  if (m_configuration.bUseTVMenuLanguage == 1)
   {
     CLog::Log(LOGDEBUG, "%s - requesting the menu language of the TV", __FUNCTION__);
-    std::string language(m_adapter->m_cecAdapter->GetDeviceMenuLanguage(CECDEVICE_TV));
-    m_adapter->SetMenuLanguage(language.c_str());
+    cec_menu_language language;
+    if (m_adapter->m_cecAdapter->GetDeviceMenuLanguage(CECDEVICE_TV, &language))
+      m_adapter->SetMenuLanguage(language.language);
+    else
+      CLog::Log(LOGDEBUG, "%s - unknown menu language", __FUNCTION__);
   }
   else
   {
@@ -1529,9 +1553,9 @@
   if (m_adapter->m_cecAdapter->IsActiveDeviceType(CEC_DEVICE_TYPE_AUDIO_SYSTEM))
   {
     // request the OSD name of the amp
-    std::string ampName(m_adapter->m_cecAdapter->GetDeviceOSDName(CECDEVICE_AUDIOSYSTEM));
-    CLog::Log(LOGDEBUG, "%s - CEC capable amplifier found (%s). volume will be controlled on the amp", __FUNCTION__, ampName.c_str());
-    strAmpName += StringUtils::Format("%s", ampName.c_str());
+    cec_osd_name ampName = m_adapter->m_cecAdapter->GetDeviceOSDName(CECDEVICE_AUDIOSYSTEM);
+    CLog::Log(LOGDEBUG, "%s - CEC capable amplifier found (%s). volume will be controlled on the amp", __FUNCTION__, ampName.name);
+    strAmpName += StringUtils::Format("%s", ampName.name);
 
     // set amp present
     m_adapter->SetAudioSystemConnected(true);
@@ -1568,8 +1592,8 @@
 
   // request the OSD name of the TV
   std::string strNotification;
-  std::string tvName(m_adapter->m_cecAdapter->GetDeviceOSDName(CECDEVICE_TV));
-  strNotification = StringUtils::Format("%s: %s", g_localizeStrings.Get(36016).c_str(), tvName.c_str());
+  cec_osd_name tvName = m_adapter->m_cecAdapter->GetDeviceOSDName(CECDEVICE_TV);
+  strNotification = StringUtils::Format("%s: %s", g_localizeStrings.Get(36016).c_str(), tvName.name);
 
   std::string strAmpName = UpdateAudioSystemStatus();
   if (!strAmpName.empty())
@@ -1742,7 +1766,7 @@
       m_standbySent = CDateTime::GetCurrentDateTime();
       m_cecAdapter->StandbyDevices(CECDEVICE_BROADCAST);
     }
-    else if (m_bSendInactiveSource == 1)
+    else if (m_configuration.bSendInactiveSource == 1)
     {
       CLog::Log(LOGDEBUG, "%s - sending inactive source commands", __FUNCTION__);
       m_cecAdapter->SetInactiveView();
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.h
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.h
@@ -146,12 +146,12 @@
     void SetMenuLanguage(const char *strLanguage);
 
     // callbacks from libCEC
-    static void CecLogMessage(void *cbParam, const CEC::cec_log_message* message);
-    static void CecCommand(void *cbParam, const CEC::cec_command* command);
-    static void CecConfiguration(void *cbParam, const CEC::libcec_configuration* config);
-    static void CecAlert(void *cbParam, const CEC::libcec_alert alert, const CEC::libcec_parameter data);
+    static int CecLogMessage(void *cbParam, const CEC::cec_log_message message);
+    static int CecCommand(void *cbParam, const CEC::cec_command command);
+    static int CecConfiguration(void *cbParam, const CEC::libcec_configuration config);
+    static int CecAlert(void *cbParam, const CEC::libcec_alert alert, const CEC::libcec_parameter data);
     static void CecSourceActivated(void *param, const CEC::cec_logical_address address, const uint8_t activated);
-    static void CecKeyPress(void *cbParam, const CEC::cec_keypress* key);
+    static int CecKeyPress(void *cbParam, const CEC::cec_keypress key);
 
     DllLibCEC*                        m_dll;
     CEC::ICECAdapter*                 m_cecAdapter;
@@ -181,12 +181,7 @@
     bool                              m_bActiveSourceBeforeStandby;
     bool                              m_bOnPlayReceived;
     bool                              m_bPlaybackPaused;
-    std::string                       m_strComPort;
-    bool                              m_bPowerOnScreensaver;
-    bool                              m_bUseTVMenuLanguage;
-    bool                              m_bSendInactiveSource;
-    bool                              m_bPowerOffScreensaver;
-    bool                              m_bShutdownOnStandby;
+    std::string                        m_strComPort;
   };
 
   class CPeripheralCecAdapterUpdateThread : public CThread
