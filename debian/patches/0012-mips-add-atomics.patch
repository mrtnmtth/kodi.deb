From 3bb261a18c9d9f7220351007db51e97c0cfdd6d9 Mon Sep 17 00:00:00 2001
From: theuni <theuni-nospam-@xbmc.org>
Date: Fri, 30 Sep 2011 06:17:00 -0400
Subject: [PATCH 2/4] mips: add atomics

Most taken from the Linux kernel.

Updated for 13.2 by Balint Reczey
---
 xbmc/threads/Atomics.cpp   |  35 ++++++--------
 xbmc/threads/MipsAtomics.h | 115 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 130 insertions(+), 20 deletions(-)
 create mode 100644 xbmc/threads/MipsAtomics.h

diff --git a/xbmc/threads/Atomics.cpp b/xbmc/threads/Atomics.cpp
index 12d3e56..ca5d981 100644
--- a/xbmc/threads/Atomics.cpp
+++ b/xbmc/threads/Atomics.cpp
@@ -20,6 +20,12 @@
 
 #include "Atomics.h"
 #include "system.h"
+
+#if defined(__mips__)
+#include "MipsAtomics.h"
+pthread_mutex_t cmpxchg_mutex = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
 ///////////////////////////////////////////////////////////////////////////
 // 32-bit atomic compare-and-swap
 // Returns previous value of *pAddr
@@ -63,10 +69,7 @@ long cas(volatile long *pAddr, long expectedVal, long swapVal)
   return prev;
 
 #elif defined(__mips__)
-// TODO:
-  unsigned int prev;
-  #error atomic cas undefined for mips
-  return prev;
+  return cmpxchg32(pAddr, expectedVal, swapVal);
 
 #elif defined(TARGET_WINDOWS)
   long prev;
@@ -103,11 +106,14 @@ long cas(volatile long *pAddr, long expectedVal, long swapVal)
 ///////////////////////////////////////////////////////////////////////////
 long long cas2(volatile long long* pAddr, long long expectedVal, long long swapVal)
 {
-#if defined(__ppc__) || defined(__powerpc__) || defined(__arm__) || defined(__mips__) // PowerPC, ARM, and MIPS
+#if defined(__ppc__) || defined(__powerpc__) || defined(__arm__)// PowerPC and ARM
 // Not available/required
 // Hack to allow compilation
   throw "cas2 is not implemented";
 
+#elif defined(__mips__)
+  return cmpxchg64(pAddr, expectedVal, swapVal);
+
 #elif defined(TARGET_WINDOWS)
   long long prev;
   __asm
@@ -183,10 +189,7 @@ long AtomicIncrement(volatile long* pAddr)
   return val;
 
 #elif defined(__mips__)
-// TODO:
-  long val;
-  #error AtomicIncrement undefined for mips
-  return val;
+  return atomic_add(1, pAddr);
 
 #elif defined(TARGET_WINDOWS)
   long val;
@@ -261,10 +264,7 @@ long AtomicAdd(volatile long* pAddr, long amount)
   return val;
 
 #elif defined(__mips__)
-// TODO:
-  long val;
-  #error AtomicAdd undefined for mips
-  return val;
+  return atomic_add(amount, pAddr);
 
 #elif defined(TARGET_WINDOWS)
   __asm
@@ -339,10 +339,7 @@ long AtomicDecrement(volatile long* pAddr)
   return val;
 
 #elif defined(__mips__)
-// TODO:
-  long val;
-  #error AtomicDecrement undefined for mips
-  return val;
+  return atomic_sub(1, pAddr);
 
 #elif defined(TARGET_WINDOWS)
   long val;
@@ -418,9 +415,7 @@ long AtomicSubtract(volatile long* pAddr, long amount)
   return val;
 
 #elif defined(__mips__)
-// TODO:
-  #error AtomicSubtract undefined for mips
-  return val;
+  return atomic_sub(amount, pAddr);
 
 #elif defined(TARGET_WINDOWS)
   amount *= -1;
diff --git a/xbmc/threads/MipsAtomics.h b/xbmc/threads/MipsAtomics.h
new file mode 100644
index 0000000..8ff69b6
--- /dev/null
+++ b/xbmc/threads/MipsAtomics.h
@@ -0,0 +1,115 @@
+/*
+ *      Copyright (C) 2005-2011 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  http://www.gnu.org/copyleft/gpl.html
+ *
+ * Copyright (C) 2003, 06, 07 by Ralf Baechle (ralf@linux-mips.org)
+ *
+ * Most of this file was borrowed from the linux kernel.
+ */
+
+#ifndef __ATOMIC_MIPS_H_
+#define __ATOMIC_MIPS_H_
+
+#include <inttypes.h>
+#include <pthread.h>
+
+extern pthread_mutex_t cmpxchg_mutex;
+
+static inline long cmpxchg32(volatile long *m, long oldval, long newval)
+{
+	long retval;
+	__asm__ __volatile__(						\
+		"	.set	push				\n"	\
+		"	.set	noat				\n"	\
+		"	.set	mips3				\n"	\
+		"1:	ll	%0, %2		# __cmpxchg_asm	\n"	\
+		"	bne	%0, %z3, 2f			\n"	\
+		"	.set	mips0				\n"	\
+		"	move	$1, %z4				\n"	\
+		"	.set	mips3				\n"	\
+		"	sc	$1, %1				\n"	\
+		"	beqz	$1, 3f				\n"	\
+		"2:						\n"	\
+		"	.subsection 2				\n"	\
+		"3:	b	1b				\n"	\
+		"	.previous				\n"	\
+		"	.set	pop				\n"	\
+		: "=&r" (retval), "=R" (*m)				\
+		: "R" (*m), "Jr" (oldval), "Jr" (newval)			\
+		: "memory");						\
+
+	return retval;
+}
+
+
+static inline long long cmpxchg64(volatile long long *ptr,
+				      long long oldval, long long newval)
+{
+	long long prev;
+
+	pthread_mutex_lock(&cmpxchg_mutex);
+	prev = *(long long *)ptr;
+	if (prev == oldval)
+		*(long long *)ptr = newval;
+	pthread_mutex_unlock(&cmpxchg_mutex);
+	return prev;
+}
+
+
+static __inline__ long atomic_add(int i, volatile long* v)
+{
+	long temp;
+
+	__asm__ __volatile__(
+		"	.set	mips3					\n"
+		"1:	ll	%0, %1		# atomic_add		\n"
+		"	addu	%0, %2					\n"
+		"	sc	%0, %1					\n"
+		"	beqz	%0, 2f					\n"
+		"	.subsection 2					\n"
+		"2:	b	1b					\n"
+		"	.previous					\n"
+		"	.set	mips0					\n"
+		: "=&r" (temp), "=m" (*v)
+		: "Ir" (i), "m" (*v));
+
+	return temp;
+}
+
+static __inline__ long atomic_sub(int i, volatile long* v)
+{
+	long temp;
+
+	__asm__ __volatile__(
+		"	.set	mips3					\n"
+		"1:	ll	%0, %1		# atomic_sub		\n"
+		"	subu	%0, %2					\n"
+		"	sc	%0, %1					\n"
+		"	beqz	%0, 2f					\n"
+		"	.subsection 2					\n"
+		"2:	b	1b					\n"
+		"	.previous					\n"
+		"	.set	mips0					\n"
+		: "=&r" (temp), "=m" (*v)
+		: "Ir" (i), "m" (*v));
+
+	return temp;
+}
+
+
+#endif
-- 
2.1.1

